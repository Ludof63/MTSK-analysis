{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 7,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n)\nSELECT \n    (select count(station_id) from flextime) as n_flextime,\n    (select count(station_id) from alwaysopen) as n_alwaysopen,\n    n_flextime + n_alwaysopen as n_open_stations;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Open Stations at ${__to}",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 3,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 7,
        "x": 7,
        "y": 0
      },
      "id": 2,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT ${fuel:raw} as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND ${fuel:raw}_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n)\nselect avg(price) as average_price from curr_prices;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Average $fuel price at ${__to}",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "stacking": {
              "group": "A",
              "mode": "none"
            }
          },
          "displayName": "$fuel price",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 10,
        "x": 14,
        "y": 0
      },
      "id": 3,
      "options": {
        "bucketCount": 50,
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT ${fuel:raw} as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND ${fuel:raw}_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n)\nselect price from curr_prices;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Distribution of $fuel prices at${__to}",
      "type": "histogram"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 13,
        "w": 14,
        "x": 0,
        "y": 4
      },
      "id": 6,
      "options": {
        "data": [
          {
            "marker": {
              "color": "blue",
              "opacity": 0.7,
              "size": 10
            },
            "mode": "markers+text",
            "textposition": "top center",
            "type": "scatter"
          }
        ],
        "layout": {
          "showlegend": false,
          "title": {
            "text": "Fuel Prices vs. Number of Open Stations"
          },
          "xaxis": {
            "autorange": true,
            "gridcolor": "#ddd",
            "range": [
              1.6634382395590959,
              1.7406516555817824
            ],
            "title": {
              "text": "Average Fuel Price (€)"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#ddd",
            "range": [
              233.1096833409821,
              2354.890316659018
            ],
            "title": {
              "text": "Number of Open Stations"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\nvar trace = {\n  x: data.series[0].fields[2].values,\n  y: data.series[0].fields[1].values,\n  text: data.series[0].fields[0].values\n};\n  \nreturn {data:[trace]};"
      },
      "pluginVersion": "0.5.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nSELECT * FROM (\n    SELECT brand, COUNT(*) n_stations, AVG(price) average_price\n    FROM curr_prices\n    WHERE brand <> ''\n    GROUP BY brand \n    ORDER BY n_stations DESC LIMIT 10\n) ORDER BY average_price;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Top 10 Brands ($fuel price vs number of stations)",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "percentage_outliers"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 10,
        "x": 14,
        "y": 6
      },
      "id": 4,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT ${fuel:raw} as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND ${fuel:raw}_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nSELECT\n    (select count(*) from prices_scores) as n_open_stations,\n    (select count(*) from prices_scores where abs(z_score) > 3) as n_outliers,\n    (n_outliers::numeric / n_open_stations) * 100 as percentage_outliers;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Outliers stats for $fuel at ${__to}",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "stacking": {
              "group": "A",
              "mode": "none"
            }
          },
          "displayName": "$fuel price",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 10,
        "x": 14,
        "y": 10
      },
      "id": 5,
      "options": {
        "bucketCount": 50,
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT ${fuel:raw} as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND ${fuel:raw}_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nselect price from prices_scores where abs(z_score) <= 3",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Distribution of $fuel prices at${__to} [NO OUTLIERS]",
      "type": "histogram"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 17
      },
      "id": 7,
      "panels": [],
      "title": "City Center ",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 13,
        "w": 16,
        "x": 0,
        "y": 18
      },
      "id": 12,
      "options": {
        "data": [
          {
            "marker": {
              "color": "blue",
              "opacity": 0.7,
              "size": 10
            },
            "mode": "markers+text",
            "textposition": "top center",
            "type": "scatter"
          }
        ],
        "layout": {
          "showlegend": false,
          "title": {
            "text": "Fuel Prices vs. Number of Open Stations"
          },
          "xaxis": {
            "autorange": true,
            "gridcolor": "#ddd",
            "range": [
              1.6258699519108573,
              1.8157999667883298
            ],
            "title": {
              "text": "Average Fuel Price (€)"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#ddd",
            "range": [
              20.89215236346948,
              291.1078476365305
            ],
            "title": {
              "text": "Number of Open Stations"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\nvar trace = {\n  x: data.series[0].fields[2].values,\n  y: data.series[0].fields[1].values,\n  text: data.series[0].fields[0].values\n};\n  \nreturn {data:[trace]};"
      },
      "pluginVersion": "0.5.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nSELECT city, count(*) as n_open_station, avg(price) as average_price\nFROM  curr_prices\nGROUP BY city HAVING count(*) > 40\nORDER BY average_price;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Cities by City Center ($fuel price vs number of stations)",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "average_price"
            },
            "properties": [
              {
                "id": "unit",
                "value": "currencyEUR"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 8,
        "x": 16,
        "y": 18
      },
      "id": 8,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nSELECT city, count(*) as n_open_station, avg(price) as average_price\nFROM  curr_prices\nGROUP BY city HAVING count(*) > 40\nORDER BY average_price;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Cities Centers Prices",
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 31
      },
      "id": 9,
      "panels": [],
      "title": "City Areas",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 13,
        "w": 16,
        "x": 0,
        "y": 32
      },
      "id": 10,
      "options": {
        "data": [
          {
            "marker": {
              "color": "blue",
              "opacity": 0.7,
              "size": 10
            },
            "mode": "markers+text",
            "textposition": "top center",
            "type": "scatter"
          }
        ],
        "layout": {
          "showlegend": false,
          "title": {
            "text": "Fuel Prices vs. Number of Open Stations"
          },
          "xaxis": {
            "autorange": true,
            "gridcolor": "#ddd",
            "range": [
              1.6587243766937063,
              1.785205463779052
            ],
            "title": {
              "text": "Average Fuel Price (€)"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#ddd",
            "range": [
              -17.51170261587886,
              1373.511702615879
            ],
            "title": {
              "text": "Number of Open Stations"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\nvar trace = {\n  x: data.series[0].fields[2].values,\n  y: data.series[0].fields[1].values,\n  text: data.series[0].fields[0].values\n};\n  \nreturn {data:[trace]};"
      },
      "pluginVersion": "0.5.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nSELECT short_cluster_name, count(*) as n_open_station, avg(price) as average_price\nFROM curr_prices p, stations_clusters sc\nWHERE p.station_id = sc.station_id\nGROUP BY cluster_id, short_cluster_name\nORDER BY average_price;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Cities by City Area ($fuel price vs number of stations)",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "average_price"
            },
            "properties": [
              {
                "id": "unit",
                "value": "currencyEUR"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 8,
        "x": 16,
        "y": 32
      },
      "id": 11,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT $__timeTo()::TIMESTAMP AS time_t, \n        (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT * FROM flextime\n),\ncurr_prices AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t \n            AND time >= time_t - INTERVAL '3 day'\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM curr_prices\n),\nprices_scores AS (\n    SELECT p.*, (p.price - avg_price) / std_dev_price AS z_score\n    FROM curr_prices p,stats\n)\nSELECT short_cluster_name, count(*) as n_open_station, avg(price) as average_price\nFROM curr_prices p, stations_clusters sc\nWHERE p.station_id = sc.station_id\nGROUP BY cluster_id, short_cluster_name\nORDER BY average_price;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Cities Centers Prices",
      "type": "table"
    }
  ],
  "preload": true,
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "diesel",
          "value": "diesel"
        },
        "description": "",
        "label": "Fuel",
        "name": "fuel",
        "options": [
          {
            "selected": true,
            "text": "diesel",
            "value": "diesel"
          },
          {
            "selected": false,
            "text": "e5",
            "value": "e5"
          },
          {
            "selected": false,
            "text": "e10",
            "value": "e10"
          }
        ],
        "query": "diesel, e5, e10",
        "type": "custom"
      },
      {
        "current": {
          "text": "",
          "value": ""
        },
        "description": "DROP TABLE IF EXISTS stations_clusters;\n\nCREATE TABLE stations_clusters AS\nWITH RECURSIVE param AS (\n    SELECT 30 AS dst_threshold\n),\ntop_cities AS ( --start from the top cities\n    SELECT city, AVG(latitude) AS lat, AVG(longitude) AS lon\n    FROM stations GROUP BY city HAVING COUNT(*) > 40\n),\nclusters AS ( --assign a station to the closest top_city \n    SELECT station_id, leader as cluster\n    FROM (\n        SELECT station_id, leader, ROW_NUMBER() OVER (PARTITION BY station_id ORDER BY distance_km ASC) AS rn\n        FROM param, (\n            SELECT s.id AS station_id, tc.city AS leader,\n            2 * 6371 * ATAN2(\n                SQRT(\n                    POWER(SIN(RADIANS(tc.lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(tc.lat)) *\n                    POWER(SIN(RADIANS(tc.lon - s.longitude) / 2), 2)\n                ),\n                SQRT(1 - (\n                    POWER(SIN(RADIANS(tc.lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(tc.lat)) *\n                    POWER(SIN(RADIANS(tc.lon - s.longitude) / 2), 2)\n                ))\n            ) AS distance_km\n            FROM stations s, param, top_cities tc)\n        WHERE distance_km <= dst_threshold\n    )\n    WHERE rn == 1\n),\nrec_clusters AS ( --merge close enough clusters togheter\n    SELECT station_id, cluster, 1 AS Level FROM clusters\n    UNION\n\n    SELECT station_id, CONCAT(LEAST(leader_a, leader_b), ', ', GREATEST(leader_a, leader_b)) AS cluster, level +1 as level \n    FROM param, rec_clusters rc, (\n        SELECT leader_a, leader_b, size_a, size_b\n        FROM (\n            SELECT leader_a, leader_b, size_a, size_b,\n                    2 * 6371 * ATAN2(\n                    SQRT(\n                        POWER(SIN(RADIANS(tc1.lat - tc2.lat) / 2), 2) +\n                        COS(RADIANS(tc2.lat)) * COS(RADIANS(tc1.lat)) *\n                        POWER(SIN(RADIANS(tc1.lon - tc2.lon) / 2), 2)\n                    ),\n                    SQRT(1 - (\n                        POWER(SIN(RADIANS(tc1.lat - tc2.lat) / 2), 2) +\n                        COS(RADIANS(tc2.lat)) * COS(RADIANS(tc1.lat)) *\n                        POWER(SIN(RADIANS(tc1.lon - tc2.lon) / 2), 2)\n                    ))\n                ) as distance_km\n            FROM (\n                SELECT cluster as leader_a, AVG(latitude) AS lat, AVG(longitude) AS lon, COUNT(*) as size_a\n                FROM rec_clusters, stations WHERE station_id = id\n                AND level = (select max(level) from rec_clusters r where r.station_id = id)\n                GROUP BY cluster ) AS tc1,\n                (\n                SELECT cluster as leader_b, AVG(latitude) AS lat, AVG(longitude) AS lon, COUNT(*) as size_b\n                FROM rec_clusters, stations WHERE station_id = id\n                AND level = (select max(level) from rec_clusters r where r.station_id = id)\n                GROUP BY cluster ) AS tc2)   \n        WHERE leader_a <> leader_b AND distance_km <= 2 * dst_threshold\n        ORDER BY distance_km ASC LIMIT 2\n    ) AS to_merge \n    WHERE rc.cluster = to_merge.leader_a\n),\nresult_clusters  AS (\n    SELECT station_id, cluster as cluster_name, DENSE_RANK() OVER (ORDER BY cluster) AS cluster_id, \n    FROM rec_clusters rc, \n    WHERE level = (select max(level) from rec_clusters h where h.station_id = rc.station_id)\n),\ncity_cluster AS (\n    SELECT city, cluster_id, (SELECT COUNT(*) FROM stations WHERE stations.city = cc.city) AS city_size\n    FROM (  SELECT unnest(string_to_array(cluster_name, ', ')) AS city, cluster_id\n            FROM result_clusters group by cluster_name,cluster_id) as cc\n),\nfinal_clusters AS (\n    SELECT station_id, old.cluster_id, new_name as cluster_name, \n        CASE WHEN LENGTH(new_name) > 20 THEN LEFT(new_name, 20) || '...' ELSE new_name END AS short_cluster_name\n    FROM result_clusters old, \n        ( SELECT cluster_id, array_to_string(array_agg(city ORDER BY city_size DESC), ', ') AS new_name\n        FROM city_cluster\n        GROUP BY cluster_id ) as new\n    WHERE old.cluster_id = new.cluster_id\n)\nselect * from final_clusters;\n\n",
        "hide": 2,
        "name": "create_clusters",
        "options": [],
        "query": "",
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "2024-01-31T17:00:00.000Z",
    "to": "2024-01-31T17:00:00.000Z"
  },
  "timepicker": {
    "refresh_intervals": []
  },
  "timezone": "utc",
  "title": "Point-In-Time Fuel Prices",
  "uid": "becy9p326gow0f",
  "version": 2,
  "weekStart": "monday"
}