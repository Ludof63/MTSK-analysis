{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Visualizations of Real-Time Fuel Prices",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "orange",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "id": 14,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/.*/",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT max(time) from prices;",
          "refId": "A",
          "sql": {
            "columns": [],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Actual Time",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 1000,
          "min": 0,
          "noValue": "0",
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 50
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "eps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 6,
        "y": 0
      },
      "id": 1,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fdl2zuq913klcb"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "CREATE TEMP TABLE IF NOT EXISTS row_count_temp (\n    time TIMESTAMP,\n    row_count BIGINT\n);\n\nSELECT ((select count(*) from prices) - row_count )  / EXTRACT(EPOCH FROM (NOW() - time)) as ins_sec\nFROM row_count_temp WHERE time = (select max(time) from row_count_temp);\n\n\nINSERT INTO row_count_temp SELECT NOW(), count(*) from prices;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Insertions per Seconds",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 12,
        "y": 0
      },
      "id": 7,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, \n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    FROM prices\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime_open AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT *  FROM flextime_open\n),\nopen_curr_price AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, \n        (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - INTERVAL '2 day' --limit\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n), \nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM open_curr_price\n) -----------\n-- Open Stations Now\nSELECT COUNT(*) from open_stations;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Open Stations Now",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": [],
          "min": 0
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 17,
        "y": 0
      },
      "id": 17,
      "options": {
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, \n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    FROM prices\n),\nactive_stations AS(\n    SELECT s.id as station_id, s.*\n    FROM param, stations s \n    WHERE first_active <= time_t AND\n    EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND time BETWEEN time_t - INTERVAL '3 day' AND time_t)-- avoid inactive stations\n), \nalwaysopen AS(\n    SELECT s.* FROM active_stations s WHERE s.always_open \n),\nflextime_open AS(\n    SELECT s.*\n    FROM param, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT *  FROM flextime_open\n),\nopen_curr_price AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, \n        (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - INTERVAL '2 day' --limit\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n), \nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM open_curr_price\n) -----------\n-- Open Stations Distribution\nSELECT \n (select count(station_id) from flextime_open) as n_flextime,\n (select count(station_id) from alwaysopen) as n_alwaysopen;",
          "refId": "FlexTime Stations",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Open Stations Distributions",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "bars",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 6
      },
      "id": 16,
      "interval": "$time_granularity",
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT \n    (select max(time) from prices) as end_t,\n    '${time_granularity}'::INTERVAL AS time_granularity,\n    ( $__timeTo()::TIMESTAMP - $__timeFrom()::TIMESTAMP) as range_t,\n    end_t - range_t as start_t, \n    EXTRACT(EPOCH FROM time_granularity) AS interval_seconds\n),\ntime_series AS (\n    SELECT  start_t + (((i-1) * interval_seconds) * INTERVAL '1 second') AS bucket_start, \n            bucket_start + (interval_seconds * INTERVAL '1 second') as bucket_end,\n    FROM param, generate_series(1 , (EXTRACT(EPOCH FROM (end_t - start_t)) / interval_seconds)) AS i\n),\nupdates AS (\n    SELECT bucket_start, station_uuid\n    FROM prices, time_series\n    WHERE (diesel_change IN (1,3) OR e5_change IN (1,3) OR e10_change IN (1,3))\n        AND time BETWEEN bucket_start AND bucket_end\n)\nselect bucket_start as datetime, count(*)\nfrom updates\ngroup by datetime;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "timeShift": "$time_diff",
      "title": "Recent Numberof  Updates (granularity: $time_granularity)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "series",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 6
      },
      "hideTimeOverride": false,
      "id": 12,
      "interval": "$time_granularity",
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "timezone": [
          "utc"
        ],
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT \n    '$now_t'::TIMESTAMP as end_t,\n    '${time_granularity}'::INTERVAL AS time_granularity,\n    ( $__timeTo()::TIMESTAMP - $__timeFrom()::TIMESTAMP) as range_t,\n    end_t - range_t as start_t, \n    EXTRACT(EPOCH FROM time_granularity) AS interval_seconds\n),\ntime_series AS (\n    SELECT  start_t + (((i-1) * interval_seconds) * INTERVAL '1 second') AS bucket_start, \n            bucket_start + (interval_seconds * INTERVAL '1 second') as bucket_end,\n            EXTRACT(dow FROM bucket_start) AS day_of_week, -- needed only for day_bit\n            (CASE WHEN day_of_week = 0 THEN 6 ELSE day_of_week -1 END ) as day_bit --needed for flextime stations\n    FROM param, generate_series(1 , (EXTRACT(EPOCH FROM (end_t - start_t)) / interval_seconds)) AS i\n),\nactive_stations AS(\n    SELECT s.id as station_id, city, brand, always_open, first_active FROM stations s, param\n    WHERE EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND p.time BETWEEN end_t - INTERVAL '3 day' AND end_t)-- avoid inactive stations\n),\nflextime_buckets AS(\n    SELECT bucket_start, s.station_id, bucket_start::date + open_time as from_t , bucket_end::date + close_time as to_t\n    FROM time_series, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id  AND first_active <= bucket_start\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND (bucket_start::date + open_time, bucket_start::date + close_time) OVERLAPS (bucket_start, bucket_end) -- opening hours?\n),\nalwaysopen_buckets AS (\n    SELECT bucket_start, station_id, bucket_start as from_t , bucket_end as to_t\n    FROM time_series, active_stations WHERE always_open AND first_active <= bucket_start\n),\nstations_time_series AS (\n    SELECT * FROM  flextime_buckets UNION ALL SELECT * FROM alwaysopen_buckets\n),\nstations_prices AS (\n   SELECT time as valid_from, diesel as price, s.*\n    FROM param, prices p, active_stations s\n    WHERE s.station_id = p.station_uuid\n    AND diesel_change IN (1,3) AND time BETWEEN param.start_t AND param.end_t\n\n    UNION ALL\n\n    SELECT  param.start_t AS valid_from, price, s.* --add last event before start\n    FROM param, active_stations s, (\n        SELECT time as valid_from, diesel as price\n        FROM prices pp, param\n        WHERE s.station_id = pp.station_uuid AND diesel_change IN (1,3)\n        AND time <= start_t AND time >= start_t - '2 day'::INTERVAL \n        ORDER BY time DESC LIMIT 1\n    ) p\n), \nprices_intervals AS (\n    SELECT LEAD(valid_from, 1, param.end_t) OVER (PARTITION BY station_id ORDER BY valid_from) AS valid_until, sp.*\n    FROM stations_prices sp, param\n),\nprices_time_series AS (\n    SELECT bucket_start, EXTRACT(EPOCH FROM (LEAST(to_t, valid_until) - GREATEST(from_t, valid_from))) as duration_seconds, p_int.*\n    FROM  stations_time_series ts, prices_intervals p_int,\n    WHERE ts.station_id = p_int.station_id AND (valid_from,valid_until) OVERLAPS (from_t, to_t)\n)\n-- OPEN STATIONS TIME-SERIES\nselect bucket_start as datetime, COUNT(station_id) as n_open_stations \nfrom stations_time_series\ngroup by bucket_start order by  bucket_start;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "timeShift": "$time_diff",
      "title": "Active Stations Recently (granularity: $time_granularity)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 3,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 2,
      "maxPerRow": 3,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "repeat": "fuel",
      "repeatDirection": "h",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) as time_t,\n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    '2 day'::INTERVAL as activity_interval\n    from prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param\n    WHERE s.always_open\n    AND EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND p.time BETWEEN time_t - activity_interval AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n    AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n    AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n    AND EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND p.time BETWEEN time_t - activity_interval AND time_t)  -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen\n    UNION ALL -- alwaysopen and flextime stations do not overlap\n    SELECT *  FROM flextime_open\n),\nopen_curr_price AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, \n        (\n            SELECT ${fuel:raw} as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - activity_interval --limit\n            AND ${fuel:raw}_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n), \nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM open_curr_price\n)\nselect avg_price as avg_${fuel:raw}_price from stats;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Average $fuel Price Now ",
      "type": "stat"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 19
      },
      "id": 13,
      "panels": [],
      "title": "Recent $fuel Prices",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Average $fuel Price",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 3,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "orange",
                "value": null
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "avg_price"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 20
      },
      "id": 15,
      "interval": "$time_granularity",
      "maxPerRow": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "repeat": "fuel",
      "repeatDirection": "v",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT \n    '$now_t'::TIMESTAMP as end_t,\n    '${time_granularity}'::INTERVAL AS time_granularity,\n    ( $__timeTo()::TIMESTAMP - $__timeFrom()::TIMESTAMP) as range_t,\n    end_t - range_t as start_t, \n    EXTRACT(EPOCH FROM time_granularity) AS interval_seconds\n),\ntime_series AS (\n    SELECT  start_t + (((i-1) * interval_seconds) * INTERVAL '1 second') AS bucket_start, \n            bucket_start + (interval_seconds * INTERVAL '1 second') as bucket_end,\n            EXTRACT(dow FROM bucket_start) AS day_of_week, -- needed only for day_bit\n            (CASE WHEN day_of_week = 0 THEN 6 ELSE day_of_week -1 END ) as day_bit --needed for flextime stations\n    FROM param, generate_series(1 , (EXTRACT(EPOCH FROM (end_t - start_t)) / interval_seconds)) AS i\n),\nactive_stations AS(\n    SELECT s.id as station_id, city, brand, always_open, first_active FROM stations s, param\n    WHERE EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND p.time BETWEEN end_t - INTERVAL '3 day' AND end_t)-- avoid inactive stations\n),\nflextime_buckets AS(\n    SELECT bucket_start, s.station_id, bucket_start::date + open_time as from_t , bucket_end::date + close_time as to_t\n    FROM time_series, stations_times st, active_stations s\n    WHERE st.station_id = s.station_id  AND first_active <= bucket_start\n        AND (days & (1 << (day_bit))) > 0 -- open day?\n        AND (bucket_start::date + open_time, bucket_start::date + close_time) OVERLAPS (bucket_start, bucket_end) -- opening hours?\n),\nalwaysopen_buckets AS (\n    SELECT bucket_start, station_id, bucket_start as from_t , bucket_end as to_t\n    FROM time_series, active_stations WHERE always_open AND first_active <= bucket_start\n),\nstations_time_series AS (\n    SELECT * FROM  flextime_buckets UNION ALL SELECT * FROM alwaysopen_buckets\n),\nstations_prices AS (\n   SELECT time as valid_from, diesel as price, s.*\n    FROM param, prices p, active_stations s\n    WHERE s.station_id = p.station_uuid\n    AND diesel_change IN (1,3) AND time BETWEEN param.start_t AND param.end_t\n\n    UNION ALL\n\n    SELECT  param.start_t AS valid_from, price, s.* --add last event before start\n    FROM param, active_stations s, (\n        SELECT time as valid_from, diesel as price\n        FROM prices pp, param\n        WHERE s.station_id = pp.station_uuid AND diesel_change IN (1,3)\n        AND time <= start_t AND time >= start_t - '2 day'::INTERVAL \n        ORDER BY time DESC LIMIT 1\n    ) p\n), \nprices_intervals AS (\n    SELECT LEAD(valid_from, 1, param.end_t) OVER (PARTITION BY station_id ORDER BY valid_from) AS valid_until, sp.*\n    FROM stations_prices sp, param\n),\nprices_time_series AS (\n    SELECT bucket_start, EXTRACT(EPOCH FROM (LEAST(to_t, valid_until) - GREATEST(from_t, valid_from))) as duration_seconds, p_int.*\n    FROM  stations_time_series ts, prices_intervals p_int,\n    WHERE ts.station_id = p_int.station_id AND (valid_from,valid_until) OVERLAPS (from_t, to_t)\n) -----------\n-- PRICES TIME-SERIES\nselect bucket_start as datetime, SUM(price * duration_seconds) / SUM(duration_seconds) as avg_price,\nfrom prices_time_series\ngroup by datetime\norder by datetime;\n",
          "refId": "recent prices",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "timeShift": "$time_diff",
      "title": "Time-Weighted Average of $fuel Prices",
      "type": "timeseries"
    }
  ],
  "preload": true,
  "refresh": "5s",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": [
            "diesel"
          ],
          "value": [
            "diesel"
          ]
        },
        "description": "",
        "label": "Fuel",
        "multi": true,
        "name": "fuel",
        "options": [
          {
            "selected": true,
            "text": "diesel",
            "value": "diesel"
          },
          {
            "selected": false,
            "text": "e5",
            "value": "e5"
          },
          {
            "selected": false,
            "text": "e10",
            "value": "e10"
          }
        ],
        "query": "diesel, e5, e10",
        "type": "custom"
      },
      {
        "current": {
          "text": "8666",
          "value": "8666"
        },
        "definition": "select count(DISTINCT station_id) from stations_times;",
        "description": "",
        "hide": 2,
        "name": "max_flextime",
        "options": [],
        "query": "select count(DISTINCT station_id) from stations_times;",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "32028886s",
          "value": "32028886s"
        },
        "definition": "SELECT EXTRACT(EPOCH FROM (NOW() - MAX(time)))::INT || 's' AS time_difference\nFROM prices;\n",
        "hide": 2,
        "name": "time_diff",
        "options": [],
        "query": "SELECT EXTRACT(EPOCH FROM (NOW() - MAX(time)))::INT || 's' AS time_difference\nFROM prices;\n",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "2024-02-06 22:01:06",
          "value": "2024-02-06 22:01:06"
        },
        "definition": "SELECT FORMAT(MAX(time), 'yyyy-MM-dd HH:mm:ss') AS now_t FROM prices;\n",
        "hide": 2,
        "name": "now_t",
        "options": [],
        "query": "SELECT FORMAT(MAX(time), 'yyyy-MM-dd HH:mm:ss') AS now_t FROM prices;\n",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "1h",
          "value": "1h"
        },
        "definition": "select i  || 'h' as min FROM generate_series(1, 4) as i\nunion all\nselect i*5  || 'm' as min FROM generate_series(1, 11) as i;",
        "description": "",
        "label": "Time Granularity",
        "name": "time_granularity",
        "options": [],
        "query": "select i  || 'h' as min FROM generate_series(1, 4) as i\nunion all\nselect i*5  || 'm' as min FROM generate_series(1, 11) as i;",
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-2d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "1s",
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h"
    ]
  },
  "timezone": "utc",
  "title": "Real-Time",
  "uid": "febgp3afngr28c",
  "version": 54,
  "weekStart": "monday"
}