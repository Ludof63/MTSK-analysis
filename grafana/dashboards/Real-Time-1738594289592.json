{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "Visualizations of Real-Time Fuel Prices",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 1000,
          "min": 0,
          "noValue": "0",
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 50
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "eps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fdl2zuq913klcb"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "CREATE TEMP TABLE IF NOT EXISTS row_count_temp (\n    time TIMESTAMP,\n    row_count BIGINT\n);\n\nSELECT ((select count(*) from prices) - row_count )  / EXTRACT(EPOCH FROM (NOW() - time)) as ins_sec\nFROM row_count_temp WHERE time = (select max(time) from row_count_temp);\n\n\nINSERT INTO row_count_temp SELECT NOW(), count(*) from prices;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Insertions per Seconds",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 5,
        "y": 0
      },
      "id": 2,
      "maxPerRow": 3,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) as time_t,\n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    '2 day'::INTERVAL as activity_interval\n    from prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param\n    WHERE s.always_open\n    AND EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND p.time BETWEEN time_t - activity_interval AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n    AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n    AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n    AND EXISTS (SELECT station_uuid from prices p where p.station_uuid = s.id AND p.time BETWEEN time_t - activity_interval AND time_t)  -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen\n    UNION ALL -- alwaysopen and flextime stations do not overlap\n    SELECT *  FROM flextime_open\n),\nopen_curr_price AS (\n    SELECT open_stations.*, p.price, p.time\n    FROM open_stations, param, \n        (\n            SELECT ${fuel} as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - activity_interval --limit\n            AND ${fuel}_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n), \nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM open_curr_price\n)\nselect avg_price as avg_diesel_price from stats;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Average $fuel Price Now ",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 9,
        "y": 0
      },
      "id": 7,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    FROM prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param \n    WHERE s.always_open\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n        AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen\n    UNION ALL -- alwaysopen and flextime stations do not overlap\n    SELECT *  FROM flextime_open\n)\nselect count(station_id) as cnt from open_stations;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Open Stations Now",
      "type": "stat"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 8,
      "panels": [],
      "title": "Prices Around Location ($latitude, $longitude) within $dst_threshold km",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": [],
          "max": 3,
          "min": -3,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 14,
        "w": 9,
        "x": 0,
        "y": 6
      },
      "id": 4,
      "options": {
        "basemap": {
          "config": {
            "showLabels": true,
            "theme": "light"
          },
          "name": "Layer 0",
          "opacity": 1,
          "type": "carto"
        },
        "controls": {
          "mouseWheelZoom": true,
          "showAttribution": true,
          "showDebug": false,
          "showMeasure": false,
          "showScale": false,
          "showZoom": true
        },
        "layers": [
          {
            "config": {
              "showLegend": true,
              "style": {
                "color": {
                  "fixed": "dark-blue"
                },
                "opacity": 1,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 5,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/square.svg",
                  "mode": "fixed"
                },
                "symbolAlign": {
                  "horizontal": "center",
                  "vertical": "center"
                },
                "text": {
                  "field": "",
                  "fixed": "ME",
                  "mode": "field"
                },
                "textConfig": {
                  "fontSize": 12,
                  "offsetX": 0,
                  "offsetY": 0,
                  "textAlign": "center",
                  "textBaseline": "middle"
                }
              }
            },
            "filterData": {
              "id": "byRefId",
              "options": "point"
            },
            "location": {
              "mode": "auto"
            },
            "name": "Location",
            "tooltip": true,
            "type": "markers"
          },
          {
            "config": {
              "showLegend": true,
              "style": {
                "color": {
                  "field": "z_score",
                  "fixed": "dark-green"
                },
                "opacity": 0.5,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 3,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/circle.svg",
                  "mode": "fixed"
                },
                "symbolAlign": {
                  "horizontal": "center",
                  "vertical": "center"
                },
                "textConfig": {
                  "fontSize": 12,
                  "offsetX": 0,
                  "offsetY": 0,
                  "textAlign": "center",
                  "textBaseline": "middle"
                }
              }
            },
            "filterData": {
              "id": "byRefId",
              "options": "close_stations"
            },
            "location": {
              "mode": "auto"
            },
            "name": "Prices stddev from mean",
            "tooltip": true,
            "type": "markers"
          }
        ],
        "tooltip": {
          "mode": "details"
        },
        "view": {
          "allLayers": true,
          "id": "fit",
          "lat": 0,
          "lon": 0,
          "zoom": 15
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, \n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    $latitude as lat, $longitude as lon, $dst_threshold AS dst_threshold\n    FROM prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param \n    WHERE s.always_open\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n        AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT *  FROM flextime_open\n),\nclose_stations AS (\n    SELECT s.* \n    FROM param, ( \n        SELECT s.*, 2 * 6371 * ATAN2(\n                SQRT(\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ),\n                SQRT(1 - (\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ))\n            ) AS dst_km\n        FROM open_stations s\n    ) as s\n    WHERE dst_km <= dst_threshold\n),\nopen_curr_price AS (\n    SELECT close_stations.*, p.price, p.time\n    FROM close_stations, param, \n        (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - INTERVAL '2 day' --limit\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM open_curr_price\n)\nSELECT station_id, latitude, longitude, price,  (price - avg_price) / std_dev_price AS z_score\nFROM open_curr_price p, stats\nWHERE ABS((p.price - stats.avg_price) / stats.std_dev_price) <= 3;\n",
          "refId": "close_stations",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fdl2zuq913klcb"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "select $latitude as latitude, $longitude as longitude;",
          "refId": "point",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Prices Status Around Location",
      "type": "geomap"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 3,
        "x": 9,
        "y": 6
      },
      "id": 9,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, \n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    $latitude as lat, $longitude as lon, $dst_threshold AS dst_threshold\n    FROM prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param \n    WHERE s.always_open\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n        AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT *  FROM flextime_open\n),\nclose_stations AS (\n    SELECT s.* \n    FROM param, ( \n        SELECT s.*, 2 * 6371 * ATAN2(\n                SQRT(\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ),\n                SQRT(1 - (\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ))\n            ) AS dst_km\n        FROM open_stations s\n    ) as s\n    WHERE dst_km <= dst_threshold\n)\nselect count(*) from close_stations;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Open Stations Around Location",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "description": "For $liters L with a consumption of $l_100km L/100km",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "fieldMinMax": true,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 14,
        "w": 12,
        "x": 12,
        "y": 6
      },
      "id": 11,
      "options": {
        "basemap": {
          "config": {
            "showLabels": true,
            "theme": "light"
          },
          "name": "Layer 0",
          "opacity": 1,
          "tooltip": true,
          "type": "carto"
        },
        "controls": {
          "mouseWheelZoom": true,
          "showAttribution": true,
          "showDebug": false,
          "showMeasure": false,
          "showScale": false,
          "showZoom": true
        },
        "layers": [
          {
            "config": {
              "showLegend": true,
              "style": {
                "color": {
                  "fixed": "dark-blue"
                },
                "opacity": 1,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 5,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/square.svg",
                  "mode": "fixed"
                },
                "symbolAlign": {
                  "horizontal": "center",
                  "vertical": "center"
                },
                "text": {
                  "field": "",
                  "fixed": "ME",
                  "mode": "field"
                },
                "textConfig": {
                  "fontSize": 12,
                  "offsetX": 0,
                  "offsetY": 0,
                  "textAlign": "center",
                  "textBaseline": "middle"
                }
              }
            },
            "filterData": {
              "id": "byRefId",
              "options": "point"
            },
            "location": {
              "mode": "auto"
            },
            "name": "Location",
            "tooltip": true,
            "type": "markers"
          },
          {
            "config": {
              "showLegend": false,
              "style": {
                "color": {
                  "field": "total_cost",
                  "fixed": "dark-green"
                },
                "opacity": 0.5,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 3,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/circle.svg",
                  "mode": "fixed"
                },
                "symbolAlign": {
                  "horizontal": "center",
                  "vertical": "center"
                },
                "textConfig": {
                  "fontSize": 12,
                  "offsetX": 0,
                  "offsetY": 0,
                  "textAlign": "center",
                  "textBaseline": "middle"
                }
              }
            },
            "filterData": {
              "id": "byRefId",
              "options": "total costs"
            },
            "location": {
              "mode": "auto"
            },
            "name": "Total Cost",
            "tooltip": true,
            "type": "markers"
          },
          {
            "config": {
              "showLegend": true,
              "style": {
                "color": {
                  "field": "position",
                  "fixed": "dark-green"
                },
                "opacity": 0.4,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 3,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/circle.svg",
                  "mode": "fixed"
                },
                "symbolAlign": {
                  "horizontal": "center",
                  "vertical": "center"
                },
                "textConfig": {
                  "fontSize": 12,
                  "offsetX": 0,
                  "offsetY": 0,
                  "textAlign": "center",
                  "textBaseline": "middle"
                }
              }
            },
            "location": {
              "mode": "auto"
            },
            "name": "Ranking",
            "tooltip": true,
            "type": "markers"
          }
        ],
        "tooltip": {
          "mode": "details"
        },
        "view": {
          "allLayers": true,
          "id": "fit",
          "lastOnly": false,
          "lat": 52.50469,
          "layer": "Ranking",
          "lon": 13.401878,
          "zoom": 15
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, \n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    $latitude as lat, $longitude as lon, $dst_threshold AS dst_threshold\n    FROM prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param \n    WHERE s.always_open\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n        AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT *  FROM flextime_open\n),\nclose_stations AS (\n    SELECT s.* \n    FROM param, ( \n        SELECT s.*, 2 * 6371 * ATAN2(\n                SQRT(\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ),\n                SQRT(1 - (\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ))\n            ) AS dst_km\n        FROM open_stations s\n    ) as s\n    WHERE dst_km <= dst_threshold\n),\nopen_curr_price AS (\n    SELECT close_stations.*, p.price, p.time\n    FROM close_stations, param, \n        (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - INTERVAL '2 day' --limit\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n)\nSELECT s.* , ROW_NUMBER() OVER (ORDER BY total_cost ASC) AS position\nFROM (\n    SELECT station_id, brand, latitude, longitude, price, dst_km, (price * $liters) + (dst_km * (($l_100km /100)*price)) as total_cost\n    FROM open_curr_price\n    ) as s;\n",
          "refId": "total costs",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fdl2zuq913klcb"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "select $latitude as latitude, $longitude as longitude;",
          "refId": "point",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Best place to fuel up?",
      "type": "geomap"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fdl2zuq913klcb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 3,
        "x": 9,
        "y": 11
      },
      "id": 10,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH param AS (\n    SELECT max(time) AS time_t, \n    (CASE WHEN EXTRACT(dow FROM time_t) = 0 THEN 6 ELSE EXTRACT(dow FROM time_t) -1 END ) as day_bit,\n    $latitude as lat, $longitude as lon, $dst_threshold AS dst_threshold\n    FROM prices\n),\nalwaysopen AS(\n    SELECT s.id as station_id, s.always_open, city, brand, latitude, longitude\n    FROM stations s, param \n    WHERE s.always_open\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nflextime_open AS(\n    SELECT station_id, false as always_open, city, brand, latitude, longitude\n    FROM stations_times st, stations s, param\n    WHERE st.station_id = s.id\n        AND (st.days & (1 << (param.day_bit))) > 0 -- open day?\n        AND time_t BETWEEN time_t::date + open_time AND time_t::date + close_time -- opening hours?\n        AND EXISTS (SELECT station_uuid FROM prices WHERE station_uuid = id AND time  BETWEEN time_t - INTERVAL '2 day' AND time_t) -- avoid inactive stations\n),\nopen_stations AS (\n    SELECT * FROM alwaysopen UNION ALL SELECT *  FROM flextime_open\n),\nclose_stations AS (\n    SELECT s.* \n    FROM param, ( \n        SELECT s.*, 2 * 6371 * ATAN2(\n                SQRT(\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ),\n                SQRT(1 - (\n                    POWER(SIN(RADIANS(lat - s.latitude) / 2), 2) +\n                    COS(RADIANS(s.latitude)) * COS(RADIANS(lat)) *\n                    POWER(SIN(RADIANS(lon - s.longitude) / 2), 2)\n                ))\n            ) AS dst_km\n        FROM open_stations s\n    ) as s\n    WHERE dst_km <= dst_threshold\n),\nopen_curr_price AS (\n    SELECT close_stations.*, p.price, p.time\n    FROM close_stations, param, \n        (\n            SELECT diesel as price ,time\n            FROM prices\n            WHERE station_uuid = station_id AND time <= time_t\n            AND time >= time_t - INTERVAL '2 day' --limit\n            AND diesel_change IN (1, 3)\n            ORDER BY time DESC\n            LIMIT 1\n        ) p\n),\nstats AS (\n    SELECT AVG(price) AS avg_price, STDDEV(price) AS std_dev_price FROM open_curr_price\n)\nselect avg_price from stats;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "AVG $fuel Price Around Location",
      "type": "stat"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "2024-01-31 23:59:21",
          "value": "2024-01-31 23:59:21"
        },
        "definition": "select format(max(time), 'YYYY-MM-DD HH:mm:ss') from prices;",
        "description": "Current maximum time in the dataset",
        "label": "Replay Time",
        "name": "replay_time",
        "options": [],
        "query": "select format(max(time), 'YYYY-MM-DD HH:mm:ss') from prices;",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "diesel",
          "value": "diesel"
        },
        "description": "",
        "label": "Fuel",
        "name": "fuel",
        "options": [
          {
            "selected": true,
            "text": "diesel",
            "value": "diesel"
          },
          {
            "selected": false,
            "text": "e5",
            "value": "e5"
          },
          {
            "selected": false,
            "text": "e10",
            "value": "e10"
          }
        ],
        "query": "diesel, e5, e10",
        "type": "custom"
      },
      {
        "current": {
          "text": [
            "Berlin"
          ],
          "value": [
            "Berlin"
          ]
        },
        "definition": "WITH param AS (\n    SELECT max(time) as time_t from prices\n)\nSELECT city FROM stations, param\nWHERE EXISTS (SELECT station_uuid from prices p where p.station_uuid = id AND p.time BETWEEN (time_t - INTERVAL '2 day') AND time_t)\nGROUP BY city HAVING COUNT(*) > 40\nORDER BY COUNT(*)  DESC;",
        "description": "",
        "includeAll": true,
        "label": "Cities",
        "multi": true,
        "name": "cities",
        "options": [],
        "query": "WITH param AS (\n    SELECT max(time) as time_t from prices\n)\nSELECT city FROM stations, param\nWHERE EXISTS (SELECT station_uuid from prices p where p.station_uuid = id AND p.time BETWEEN (time_t - INTERVAL '2 day') AND time_t)\nGROUP BY city HAVING COUNT(*) > 40\nORDER BY COUNT(*)  DESC;",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "52.50383",
          "value": "52.50383"
        },
        "description": "",
        "label": "Latitude",
        "name": "latitude",
        "options": [
          {
            "selected": true,
            "text": "52.50383",
            "value": "52.50383"
          }
        ],
        "query": "52.50383",
        "type": "textbox"
      },
      {
        "current": {
          "text": "13.3936",
          "value": "13.3936"
        },
        "description": "",
        "label": "Longitude",
        "name": "longitude",
        "options": [
          {
            "selected": true,
            "text": "13.3936",
            "value": "13.3936"
          }
        ],
        "query": "13.3936",
        "type": "textbox"
      },
      {
        "current": {
          "text": "30",
          "value": "30"
        },
        "description": "Maximum search distance from my location in km",
        "label": "Radius (km)",
        "name": "dst_threshold",
        "options": [
          {
            "selected": true,
            "text": "30",
            "value": "30"
          }
        ],
        "query": "30",
        "type": "textbox"
      },
      {
        "current": {
          "text": "7",
          "value": "7"
        },
        "description": "",
        "label": "Fuel Consumption (L/100km)",
        "name": "l_100km",
        "options": [
          {
            "selected": true,
            "text": "7",
            "value": "7"
          }
        ],
        "query": "7",
        "type": "textbox"
      },
      {
        "current": {
          "text": "40",
          "value": "40"
        },
        "description": "",
        "label": "Liters",
        "name": "liters",
        "options": [
          {
            "selected": true,
            "text": "40",
            "value": "40"
          }
        ],
        "query": "40",
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-12h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "500ms",
      "1s",
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h"
    ]
  },
  "timezone": "utc",
  "title": "Real-Time",
  "uid": "febgp3afngr28c",
  "version": 37,
  "weekStart": ""
}